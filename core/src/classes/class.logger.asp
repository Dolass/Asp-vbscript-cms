<%
'**
'* @file
'*   Application-level message logging and debugging.


'!!
'! @class CmsLogger
'!   Implements a custom logging mechanism for the CMS, incorporating error
'!   handling and multi-level severity logging.
class CmsLogger

	'* An internal log of runtime messages generated by the application.
	private m_log
	
	'* Messages logged with a severity lower than the logger's log level are 
	'* discarded.
	private m_level
	
	'* Aplication wide debugging. If debugger is enabled,
	private m_debugger

	'* Retrieve the logger level.
	public property get level()
		level = m_level
	end property

	'* Log messages above the specified severity level.
	'* Note this value will be overridden if the debugger is enabled.
	public property let level(severity)
		m_level = severity
	end property
	
	public property get debugger()
		debugger = m_debugger
	end property

	'**
	'* Enable or disable the debugger.
	public property let debugger(status)
		m_debugger = status
	end property

	'**
	'* Constructor intializes the internal logging mechanism.
	public sub class_initialize()
		set m_log = new FastString
		
		' During application loading the default level is set to warning.
		' after the application is fully bootstrapped, the level should be set
		' according to the log_level specified in the application settings.
		m_level = WARN_LEVEL
		
		' Debugging is turned off by default. This can be overridden
		m_debugger = DISABLED
	end sub

	'**
	'* Final cleanup log entries.
	public sub close()
		log "Number of Database Operations: "& db.getCallCount(), INFO_LEVEL
		log "Total Program Execution Time: "& getProgramTime(), INFO_LEVEL
	end sub

	'**
	'* Flush the log of all current entries, resetting the logger to a clean-
	'* state.
	'*
	public function clear()
		m_log.clear
	end function

	'**
	'* Format the log in html suitable for display in a web browser.
	'* @return String of html-formatted log messages
	public function to_html()
		to_html = m_log.value
	end function

	'**
	'* Return the log in a string format, each entry is separated by a newline.
	public function to_string()
		' Strip html tags.
		to_string = regex.replace(m_log.value, regex.HTML_TAGS, "")
	end function

	'**
	'* Dump the log buffer to the screen, formatted with HTML, and then clear
	'* the buffer.  Calling this method only produces a dump when DEBUG is 
	'* enabled, and the user is logged in as an Administrator.
	'* 
	'* @return (String)
	'*   The current log buffer 
	public function debug_dump()
		if globals("DEBUG") = "1" and user.isAdministrator() then
			close
			writeln("<div id=""debug"" class=""clearfix"">")
			writeln(to_html)
			writeln("</div> <!--end debug-->")
			clear
		end if
	end function
	
	'**
	'* Add a message to the logger.
	'*
	public function log(message, severity)
		log = TRUE
		if not (severity < m_level) then 
			m_log.add message & vbCrLf
			'response.write(message & vbCrLf)
			log = TRUE
		end if
	end function

	
end class
$>